def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var13 = var5(arg1, arg2)
    var20 = func5(var13, arg2)
    var24 = func6(var13, var20)
    def func8(arg25, arg26):
        var27 = arg26 ^ arg2 + var13
        result = 536384103 ^ (arg25 & (1251469579 + (arg26 + (var13 | (var20 | arg26 ^ arg26 | (arg25 & arg2 ^ arg2))))) - var20)
        return result
    var28 = func8(arg2, arg1)
    var33 = func9(var28, arg1)
    var34 = var24 ^ (var24 ^ var28) | var33
    var35 = var13 | var33
    var36 = var28 - (-1904602202 + var34 & var33)
    if var13 < var20:
        var37 = var36 ^ var33
    else:
        var37 = 676 ^ 690
    if arg1 < var20:
        var38 = var20 & ((var36 & var36) | var35)
    else:
        var38 = -1611701884 - var28 & var20
    var39 = arg1 | (var33 ^ var34) - var36
    var40 = var28 & arg2
    if var34 < var20:
        var41 = (var13 ^ -1590028952 ^ var20) ^ arg2
    else:
        var41 = var20 ^ arg1
    var42 = (var13 + var33) - var35 | var35
    var43 = var28 - var20 & (var34 - var39)
    var44 = arg2 | var36 ^ (var39 - var20)
    var45 = var34 + (16200071 + var42)
    var46 = var36 ^ var13 ^ var13 - var20
    var47 = -513 | var35 ^ var42
    var48 = (var44 - var44 ^ var40) | arg1
    var49 = (var20 | (var24 ^ var13)) + var33
    var50 = var20 ^ var45
    var51 = (var42 ^ arg2) ^ arg2 + var28
    var52 = (var42 | 803 - var50) & var28
    result = var24 + (-365 | ((var51 | (var42 ^ var50)) - (var47 - arg1 | arg1 - -1015976504 & (var50 ^ var52))))
    return result
def func9(arg29, arg30):
    var31 = 0
    for var32 in range(11):
        var31 += var31 | (var32 | arg30)
    return var31
def func5(arg14, arg15):
    if arg14 < arg14:
        var16 = 4 - arg14 + 826
    else:
        var16 = -496975192 ^ arg14
    if arg15 < arg15:
        var17 = arg14 & arg14 | 1485666464 + arg15 ^ ((arg14 & arg15) ^ -19)
    else:
        var17 = -346 - -432
    var18 = arg15 + -209 ^ -165 ^ (arg15 ^ -1927763550) + (-929391864 & arg15)
    var19 = (83 ^ arg14 ^ -973420565) | -1525808377
    result = 554 & (arg15 ^ arg15 + -469 & ((382 ^ arg14 ^ ((var19 - arg14) - -845) + var19) - 659) | -1797324221)
    return result
def func4(arg6, arg7):
    var8 = (-399 | (arg7 - -1336554942) - arg6 ^ 1238014908 ^ 400 + -304 | ((arg6 | arg7 ^ arg7) & arg6) ^ -861 + arg7 & arg6 - (-61 & arg7)) ^ arg6
    var9 = ((arg6 & (((arg6 ^ var8 - -306) + (372 ^ -100) | 1664883151) ^ ((var8 - -422266102) + -754) + arg6 | (1374647756 - -1578147862 ^ (-370 ^ (arg6 | (arg6 | (var8 | arg7))))))) + var8) + arg7
    var10 = -846 | var9
    var11 = var9 ^ -1508846520
    var12 = (var8 - (arg6 | (327564991 & arg7 & arg7) + 577115009) ^ (var9 & (var11 & (1357221940 | arg7)) + var9)) + ((arg6 & 455) ^ (((arg6 ^ arg7) - (var9 + -1093992645)) ^ ((var9 - arg6) - -968425112 | arg6))) + var10
    result = var11 ^ var12
    return result
def func3():
    closure = [0]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg21, arg22):
    closure = [0]
    def func7(acc, rest):
        var23 = 2 - 2 - 2 + (rest & 0 + 5) & 5
        closure[0] += var23
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 53'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
